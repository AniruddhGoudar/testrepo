/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Executives;

import Business.Business;
import Business.Customers.CustomersSeller;
import Business.Customers.CustomersSellerDirectory;
import Business.Executives.ExecutiveCases;
import Business.Executives.ExecutiveCasesDirectory;
import Business.UserAccountManagement.UserAccount;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bindupagad
 */
public class AssignCasesJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AssignCasesJPanel
     */
    JPanel workArea;
    Business business;
    UserAccount userAccount;
    CustomersSellerDirectory custSellerDirectory;
    ExecutiveCasesDirectory exeCasesDirectory;
    ExecutiveCases exeCaseMain;

    public AssignCasesJPanel(JPanel workArea, Business business, UserAccount userAccount) {
        initComponents();
        this.workArea = workArea;
        this.business = business;
        this.userAccount = userAccount;
        custSellerDirectory = business.getCustomersSellerDirectory();
        exeCasesDirectory = business.getExeCasesDirectory();

        showAllCases();
            showMyCases();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCarBuy = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMyQueue = new javax.swing.JTable();
        btnAssignMe = new javax.swing.JButton();
        btnProceedCase1 = new javax.swing.JButton();
        lblCustQueue = new javax.swing.JLabel();
        lblCustQueue1 = new javax.swing.JLabel();

        tblCarBuy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "CarId", "Company", "Car Model", "Customer Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCarBuy);

        tblMyQueue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "CarId", "Company", "Car Model", "Customer Type", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblMyQueue);

        btnAssignMe.setText("Assign me");
        btnAssignMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignMeActionPerformed(evt);
            }
        });

        btnProceedCase1.setText("Proceed Case");
        btnProceedCase1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProceedCase1ActionPerformed(evt);
            }
        });

        lblCustQueue.setText("Customers In Queue");

        lblCustQueue1.setText("Customers in my Queue");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCustQueue)
                            .addComponent(lblCustQueue1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAssignMe)))
                        .addGap(200, 200, 200))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnProceedCase1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lblCustQueue)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAssignMe))
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnProceedCase1)
                        .addGap(108, 108, 108))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCustQueue1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void btnAssignMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignMeActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCarBuy.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select the case from queue to assign");
        } else {
            DefaultTableModel model = (DefaultTableModel) tblCarBuy.getModel();
            String carId = (String) model.getValueAt(selectedRowIndex, 0);

            System.out.println("carId" + carId);

            ExecutiveCases exeCase = new ExecutiveCases(carId, userAccount);
            exeCase.setStatus("In Progress");

            exeCasesDirectory.addExecutiveCases(exeCase);

            System.out.println("exeCasesDirectory.getExecutiveCases()" + exeCasesDirectory.getExecutiveCases().size());
            showMyCases();
            showAllCases();
        }
    }//GEN-LAST:event_btnAssignMeActionPerformed

    private void btnProceedCase1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProceedCase1ActionPerformed
        // TODO add your handling code here:
    DefaultTableModel model = (DefaultTableModel) tblMyQueue.getModel();
    int selectedRowIndex = tblMyQueue.getSelectedRow();

    if (selectedRowIndex < 0) {
        JOptionPane.showMessageDialog(this, "Please select the case to proceed");
        return; // Exit the method if no row is selected
    }

    String carId = (String) model.getValueAt(selectedRowIndex, 0);

    ExecutiveCases exeCaseMain = exeCasesDirectory.getExecutiveCases().stream()
            .filter(it -> it.getCarId().equals(carId))
            .findFirst()
            .orElse(null);

    if (exeCaseMain != null) {
        System.out.println("exeCase" + exeCaseMain.getStatus());
        exeCaseMain.setStatus("Executive Working");

        AssignedCasesJPanel assignedPanel = new AssignedCasesJPanel(workArea, business, exeCaseMain);
        workArea.add(assignedPanel);
        ((java.awt.CardLayout) workArea.getLayout()).next(workArea);
    } else {
        // Handle the case when exeCaseMain is null (no matching ExecutiveCases found)
        System.out.println("No matching Executive Case found for carId: " + carId);
}
      
    }//GEN-LAST:event_btnProceedCase1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignMe;
    private javax.swing.JButton btnProceedCase1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCustQueue;
    private javax.swing.JLabel lblCustQueue1;
    private javax.swing.JTable tblCarBuy;
    private javax.swing.JTable tblMyQueue;
    // End of variables declaration//GEN-END:variables

    private void showAllCases() {
        DefaultTableModel model = (DefaultTableModel) tblCarBuy.getModel();
        model.setRowCount(0);
        System.out.println("showAllCases");

        if (exeCasesDirectory.getExecutiveCases() != null && !exeCasesDirectory.getExecutiveCases().isEmpty()) {
            for (CustomersSeller c : custSellerDirectory.getCustomersSeller()) {
                for (ExecutiveCases e : exeCasesDirectory.getExecutiveCases()) {
                    Object row[] = new Object[4];

                    System.out.println("c.getType()" + c.getType());
                    System.out.println("e.getType()" + e.getCarId());

                    if (c.getType().equals("Seller") && !c.getUniqueId().equals(e.getCarId())) {
                        row[0] = c.getUniqueId();
                        row[1] = c.getCarCompany();
                        row[2] = c.getCarModel();
                        row[3] = c.getSellingPrice();
                        model.addRow(row);
                    }
                }
            }
        } else {
            for (CustomersSeller c : custSellerDirectory.getCustomersSeller()) {

                Object row[] = new Object[4];

                if (c.getType().equals("Seller")) {
                    row[0] = c.getUniqueId();
                    row[1] = c.getCarCompany();
                    row[2] = c.getCarModel();
                    row[3] = c.getSellingPrice();
                    model.addRow(row);
                }
            }
        }
    }

    private void showMyCases() {

        DefaultTableModel model = (DefaultTableModel) tblMyQueue.getModel();
        model.setRowCount(0);
        
         if (exeCasesDirectory.getExecutiveCases() != null && !exeCasesDirectory.getExecutiveCases().isEmpty()) {
            for (ExecutiveCases e : exeCasesDirectory.getExecutiveCases()) {
                Object row[] = new Object[5];
                System.out.println("e.getCarId()" + e.getCarId());
                for (CustomersSeller c : custSellerDirectory.getCustomersSeller()) {
                    System.out.println("c.getUniqueId()" + c.getUniqueId());
                    if (e.getCarId().equals(c.getUniqueId())) {
                        row[0] = c.getUniqueId();
                        row[1] = c.getCarCompany();
                        row[2] = c.getCarModel();
                        row[3] = c.getSellingPrice();
                        row[4] = e.getStatus();
                        model.addRow(row);
                    }
                }
            }
        }
    }

}
